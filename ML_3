import os
import cv2
import numpy as np
import requests
from tqdm import tqdm
from ddgs import DDGS
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report

# Parameters
NUM_IMAGES = 30
IMAGE_SIZE = (128, 128)
DATASET_DIR = "ml_3"

# Create directories
os.makedirs(os.path.join(DATASET_DIR, "cats"), exist_ok=True)
os.makedirs(os.path.join(DATASET_DIR, "dogs"), exist_ok=True)

# Function to download images
def download_images(query, folder):
    print(f"Downloading {query} images...")
    with DDGS() as ddgs:
        results = ddgs.images(query, max_results=NUM_IMAGES)
        for i, result in enumerate(tqdm(results)):
            try:
                url = result["image"]
                response = requests.get(url, timeout=20)
                if response.status_code == 200:
                    file_path = os.path.join(DATASET_DIR, folder, f"{folder}_{i}.jpg")
                    with open(file_path, "wb") as f:
                        f.write(response.content)
            except Exception as e:
                print(f"Failed to download image {i} from {query}: {e}")

# Download cat and dog images
download_images("cat", "cats")
download_images("dog", "dogs")

# Prepare dataset
data = []
labels = []

for label, category in enumerate(["cats", "dogs"]):
    folder_path = os.path.join(DATASET_DIR, category)
    for file_name in os.listdir(folder_path):
        file_path = os.path.join(folder_path, file_name)
        try:
            img = cv2.imread(file_path)
            if img is not None:
                img = cv2.resize(img, IMAGE_SIZE)
                data.append(img.flatten())
                labels.append(label)
            else:
                print(f"Error reading {file_path}")
        except Exception as e:
            print(f"Error processing {file_path}: {e}")

data = np.array(data)
labels = np.array(labels)

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(
    data, labels, test_size=0.2, random_state=42
)

# Train SVM
clf = SVC(kernel="linear")
clf.fit(X_train, y_train)

# Predictions
y_pred = clf.predict(X_test)

# Accuracy
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy}")

# Classification report
print("\nClassification Report:")
print(classification_report(y_test, y_pred))
